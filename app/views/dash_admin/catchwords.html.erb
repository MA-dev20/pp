<section id="gd_team">
    <input type="text" id="searchField" placeholder="suchen" onfocus='team_hide()' onblur="team_show()">
    <%= image_tag 'dash/search.png' %>
</section>
<script type="text/javascript">
  var stream, form, globalForm,recorder, audio, timer;
  globalForm = new FormData();
  var processing= false;
  audio = new Audio();
</script>
<section id="teams-container">
    <div class="add_team" onclick="openBasket()">
       <a onclick="openBasket()"></a>
        <div class="head">
            Catchword List
        </div>
        <div class="middle">
            +
        </div>
        <div class="bottom">
            hinzufügen
        </div>
    </div>
    <% @baskets.each do |b| %>
    <div class="team_card">

       <%= link_to '', "", class: "lists", data: {id: b.id} %>

        <div class="head">
            <%= b.name %>
        </div>
        <div class="middle">
            <span id="count<%= b.id %>"><%= b.words.distinct.count %></span> words
        </div>
        <div class="bottom">
            <%= link_to '', dash_admin_delete_basket_path(b.id), method: :post,class: 'fas fa-trash-alt', data: { confirm: "Sind Sie sicher, dass Sie das List unwiederuflich löschen möchten?" }%>
        </div>
    </div>
        <%= render partial: 'catchwords_modal', locals: {id: b.id, words: b.words, name: b.name, objection: false} %>
    <% end %>

</section>
<div class="fullscren-blur" id="help-popup">
</div>
<script>
$(".lists").on("click", function(e){
    e.preventDefault()
    $("#catchword"+$(this).data("id")).modal("show")
})

var $rows = $('.team_card');
$('#searchField').keyup(function() {
    
    var val = '^(?=.*\\b' + $.trim($(this).val()).split(/\s+/).join('\\b)(?=.*\\b') + ').*$',
        reg = RegExp(val, 'i'),
        text;
    
    $rows.show().filter(function() {
        text = $(this).text().replace(/\s+/g, ' ');
        return !reg.test(text);
    }).hide();
});
team_show = function() {
    $('.add_team').show();
}
team_hide = function() {
    $('.add_team').hide();
}
new PerfectScrollbar('#teams-container');
function createObjection(id, globalForm) {
    $.ajax({
      url: "/admin/dash/words/"+id,
      type: 'put',
      cache: false,
      async: true,
      contentType: false,
      processData: false,
      data:  globalForm,
      beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
      success: function(res){
        globalForm = new FormData();
        $("#word"+id).data("url", res.sound)
        $("#word"+id).parent().removeClass("opacity-class")
      }
    })
}
$(".record").on('click', function(e){
  e.preventDefault()
  id = $(this).data("id");
  requestAudio(id)
})
// function requestAudio(id) {
//   var seconds = 10;
//   navigator.mediaDevices.getUserMedia({ audio: true }).then(stm => {
//       stream = stm;
//       recorder = new MediaRecorder(stream);
//       $("#recording"+id).addClass("fa-stop-circle").removeClass("fa-dot-circle")
//       recorder.start(1000);
//       setTimeout(() => {
//         stopRecording(id)
//       }, 10000);
//     }).catch(console.error);
// }
function requestAudio(id) {
  var seconds = 10;
  navigator.mediaDevices.getUserMedia({ audio: true }).then(str => {
      const chunks = [];
      stream = str;
      recorder = new MediaRecorder(stream);
      recorder.ondataavailable = e => {
        seconds -= 1 
        chunks.push(e.data);
        $("#recording"+id).addClass("fa-stop-circle").removeClass("fa-dot-circle")
        $("#word"+id).parent().addClass("opacity-class")
        if (recorder.state == 'inactive') {
            const blob = new Blob(chunks, { type: 'audio/webm' });
            var file = new window.File([blob], ['audio', (new Date() + '').slice(4, 28), '.mp3'].join(''))
            globalForm.append("file",file);
            $("#recording"+id).addClass("fa-dot-circle").removeClass("fa-stop-circle")
            createObjection(id, globalForm)
            $("#word"+id).parent().removeClass("opacity-class")
            processing = false;
        }
      };
      recorder.start(1000);
      timer = setTimeout(() => {
        stopRecording(id)
      }, 11000);
    }).catch(console.error);
}
function stopRecording(id){
  clearTimeout(timer);
  if(recorder.state != 'inactive'){
    recorder.stop()
  }
  $("#recording"+id).addClass("fa-dot-circle").removeClass("fa-stop-circle")
  stream.getTracks()[0].stop()
}

// window.onload = setTimeout(function(){
//     alert('This is an alert');
//     window.location = 'http://www.example.com';
// }, 5000);

</script>
